#define CATCH_CONFIG_MAIN
#include "catch.hpp"

#include "ProgramAssociationTable.hpp"
#include "ProgramMapTable.hpp"
#include "Packetizer.hpp"
#include "Demultiplexer.hpp"

TEST_CASE("ByteViewReader can read sequential bytes")
{
    const uint8_t bytes[] = { 0,1,2,3,4,5,6,7 };
    ByteView view(bytes, sizeof bytes);
    ByteViewReader reader(view);
    for (int i = 0; i < 8; i++)
    {
        REQUIRE(reader.read_byte() == i);
    }
}

TEST_CASE("ByteViewReader can read sequential shorts")
{
    const uint8_t bytes[] = { 0,1, 2,3, 4,5, 6,7 };
    ByteView view(bytes, sizeof bytes);
    ByteViewReader reader(view);
    for (int i = 0; i < 8; i+=2)
    {
        uint16_t expected = bytes[i] << 8 | bytes[i + 1];
        REQUIRE(reader.read_short() == expected);
    }
}

TEST_CASE("ByteViewReader can read sequential uint32_t")
{
    const uint8_t bytes[] = { 0, 1, 2 ,3 , 4, 5, 6 ,7 };
    ByteView view(bytes, sizeof bytes);
    ByteViewReader reader(view);
    for (int i = 0; i < 8; i+=4)
    {
        uint32_t expected = bytes[i] << 24 
                          | (bytes[i + 1] << 16)
                          | (bytes[i + 2] << 8)
                          | (bytes[i + 3]);

        REQUIRE(reader.read_word() == expected);
    }
}


TEST_CASE("ByteViewReader::remaining_bytes returns remaining substring of the original ByteView")
{
    const uint8_t bytes[] = { 0,1, 2,3, 4,5, 6,7 };
    ByteView view(bytes, 8);
    ByteViewReader reader(view);
  
    reader.read_byte();
    REQUIRE(reader.remaining_bytes().size() == 7);
    REQUIRE(reader.remaining_bytes() == ByteView(&bytes[1], 7));
}


const uint8_t elephants_pat[] = {
   0x47, 0x40, 0x00, 0x10, 0x00, 0x00, 0xB0, 0x0D, 0x41, 0x57, 0xC1, 0x00, 0x00, 0x41, 0x57, 0xE0,
    0x20, 0x9D, 0xE6, 0x30, 0x91, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};


TEST_CASE("ProgramAssociationTable parses the PAT correctly")
{
    ProgramAssociationTable pat;

    pat.on_packet(Packet(ByteView(elephants_pat, Packet::Size)));
    REQUIRE(pat.is_pmt_packet(32));
}



const uint8_t elephants_pmt[] = {
0x47, 0x40, 0x20, 0x10, 0x00, 0x02, 0xB0, 0x1D, 0x41, 0x57, 0xC1, 0x00, 0x00, 0xE0, 0x21, 0xF0,
0x00, 0x0F, 0xE0, 0x22, 0xF0, 0x06, 0x0A, 0x04, 0x65, 0x6E, 0x67, 0x00, 0x1B, 0xE0, 0x21, 0xF0,
0x00, 0x7E, 0x0D, 0xE6, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

TEST_CASE("ProgramMapTable extracts all PIDS correctly")
{
    ProgramMapTable pmt;

    pmt.on_packet(Packet(ByteView(elephants_pmt, Packet::Size)));
    REQUIRE(pmt.is_tracked_pid(0x21));
    REQUIRE(pmt.is_tracked_pid(0x22));
    REQUIRE(!pmt.is_tracked_pid(0x23));
}

TEST_CASE("ProgramMapTable detects the stream type of each ES")
{
    ProgramMapTable pmt;

    pmt.on_packet(Packet(ByteView(elephants_pmt, Packet::Size)));
    REQUIRE(pmt.find_stream_info(0x21)->type() == StreamInfo::Type::Video);
    REQUIRE(pmt.find_stream_info(0x22)->type() == StreamInfo::Type::Audio);
}

const uint8_t bad_packet[] = {
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x47, 0x40, 0x20, 0x10, 0x00, 0x02, 0xB0, 0x1D, 0x41, 0x57, 0xC1, 0x00, 0x00, 0xE0, 0x21, 0xF0,
    0x00, 0x0F, 0xE0, 0x22, 0xF0, 0x06, 0x0A, 0x04, 0x65, 0x6E, 0x67, 0x00, 0x1B, 0xE0, 0x21, 0xF0,
    0x00, 0x7E, 0x0D, 0xE6, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

// One test file I attempted to process seemed to begin with a Null packet full of 0xFF.
TEST_CASE("Packetizer can handle syncing with a bad packet")
{
    int packets_read = 0;
    Packetizer packetizer([&](const Packet & pkt)
    {
        REQUIRE(pkt.pid() == 32);
        packets_read ++;
    });
    
    packetizer.on_input(ByteView(bad_packet, sizeof(bad_packet)));
    packetizer.on_input(ByteView(elephants_pmt, sizeof(elephants_pmt)));

    REQUIRE(packets_read == 2);
}


// The two following packets contain a PMT with 50 streams, using PIDs 0..49
const uint8_t large_pmt_packet_1[] = {
    0x47, 0x50, 0x00, 0x10, 0x00, 0x02, 0xB1, 0x07, 0x00, 0x01, 0xC1, 0x00, 0x00, 0xE1, 0x00, 0xF0,
    0x00, 0x1B, 0xE1, 0x00, 0xF0, 0x00, 0x1B, 0xE1, 0x01, 0xF0, 0x00, 0x1B, 0xE1, 0x02, 0xF0, 0x00,
    0x1B, 0xE1, 0x03, 0xF0, 0x00, 0x1B, 0xE1, 0x04, 0xF0, 0x00, 0x1B, 0xE1, 0x05, 0xF0, 0x00, 0x1B,
    0xE1, 0x06, 0xF0, 0x00, 0x1B, 0xE1, 0x07, 0xF0, 0x00, 0x1B, 0xE1, 0x08, 0xF0, 0x00, 0x1B, 0xE1,
    0x09, 0xF0, 0x00, 0x1B, 0xE1, 0x0A, 0xF0, 0x00, 0x1B, 0xE1, 0x0B, 0xF0, 0x00, 0x1B, 0xE1, 0x0C,
    0xF0, 0x00, 0x1B, 0xE1, 0x0D, 0xF0, 0x00, 0x1B, 0xE1, 0x0E, 0xF0, 0x00, 0x1B, 0xE1, 0x0F, 0xF0,
    0x00, 0x1B, 0xE1, 0x10, 0xF0, 0x00, 0x1B, 0xE1, 0x11, 0xF0, 0x00, 0x1B, 0xE1, 0x12, 0xF0, 0x00,
    0x1B, 0xE1, 0x13, 0xF0, 0x00, 0x1B, 0xE1, 0x14, 0xF0, 0x00, 0x1B, 0xE1, 0x15, 0xF0, 0x00, 0x1B,
    0xE1, 0x16, 0xF0, 0x00, 0x1B, 0xE1, 0x17, 0xF0, 0x00, 0x1B, 0xE1, 0x18, 0xF0, 0x00, 0x1B, 0xE1,
    0x19, 0xF0, 0x00, 0x1B, 0xE1, 0x1A, 0xF0, 0x00, 0x1B, 0xE1, 0x1B, 0xF0, 0x00, 0x1B, 0xE1, 0x1C,
    0xF0, 0x00, 0x1B, 0xE1, 0x1D, 0xF0, 0x00, 0x1B, 0xE1, 0x1E, 0xF0, 0x00, 0x1B, 0xE1, 0x1F, 0xF0,
    0x00, 0x1B, 0xE1, 0x20, 0xF0, 0x00, 0x1B, 0xE1, 0x21, 0xF0, 0x00, 0x1B
};

const uint8_t large_pmt_packet_2[] = {
    0x47, 0x10, 0x00, 0x11, 0xE1, 0x22, 0xF0, 0x00, 0x1B, 0xE1, 0x23, 0xF0, 0x00, 0x1B, 0xE1, 0x24,
    0xF0, 0x00, 0x1B, 0xE1, 0x25, 0xF0, 0x00, 0x1B, 0xE1, 0x26, 0xF0, 0x00, 0x1B, 0xE1, 0x27, 0xF0,
    0x00, 0x1B, 0xE1, 0x28, 0xF0, 0x00, 0x1B, 0xE1, 0x29, 0xF0, 0x00, 0x1B, 0xE1, 0x2A, 0xF0, 0x00,
    0x1B, 0xE1, 0x2B, 0xF0, 0x00, 0x1B, 0xE1, 0x2C, 0xF0, 0x00, 0x1B, 0xE1, 0x2D, 0xF0, 0x00, 0x1B,
    0xE1, 0x2E, 0xF0, 0x00, 0x1B, 0xE1, 0x2F, 0xF0, 0x00, 0x1B, 0xE1, 0x30, 0xF0, 0x00, 0x1B, 0xE1,
    0x31, 0xF0, 0x00, 0x3C, 0xEB, 0xDC, 0x0D, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

// Identical to above, but with a continuity counter of 2 instead of the expected 1
const uint8_t large_pmt_packet_2_discontinuity[] = {
    0x47, 0x10, 0x00, 0x12, 0xE1, 0x22, 0xF0, 0x00, 0x1B, 0xE1, 0x23, 0xF0, 0x00, 0x1B, 0xE1, 0x24,
    0xF0, 0x00, 0x1B, 0xE1, 0x25, 0xF0, 0x00, 0x1B, 0xE1, 0x26, 0xF0, 0x00, 0x1B, 0xE1, 0x27, 0xF0,
    0x00, 0x1B, 0xE1, 0x28, 0xF0, 0x00, 0x1B, 0xE1, 0x29, 0xF0, 0x00, 0x1B, 0xE1, 0x2A, 0xF0, 0x00,
    0x1B, 0xE1, 0x2B, 0xF0, 0x00, 0x1B, 0xE1, 0x2C, 0xF0, 0x00, 0x1B, 0xE1, 0x2D, 0xF0, 0x00, 0x1B,
    0xE1, 0x2E, 0xF0, 0x00, 0x1B, 0xE1, 0x2F, 0xF0, 0x00, 0x1B, 0xE1, 0x30, 0xF0, 0x00, 0x1B, 0xE1,
    0x31, 0xF0, 0x00, 0x3C, 0xEB, 0xDC, 0x0D, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

TEST_CASE("PSITable can reassemble a PMT that spans two packets")
{
    ProgramMapTable pmt;
    int packets_read = 0;
    Packetizer packetizer([&](const Packet & pkt)
    {
        pmt.on_packet(pkt);
        packets_read ++;
    });
    
    packetizer.on_input(ByteView(large_pmt_packet_1, sizeof(large_pmt_packet_1)));
    packetizer.on_input(ByteView(large_pmt_packet_2, sizeof(large_pmt_packet_2)));

    REQUIRE(packets_read == 2);
    REQUIRE(pmt.size() == 50);
    for (int pid = 256; pid <= 305; pid++)
    {
        REQUIRE(pmt.is_tracked_pid(pid));
    }
}

TEST_CASE("PSITable can handle a discontinuity in the PMT packet stream")
{
    ProgramMapTable pmt;
    int packets_read = 0;
    Packetizer packetizer([&](const Packet & pkt)
    {
        pmt.on_packet(pkt);
        packets_read++;
    });

    packetizer.on_input(ByteView(large_pmt_packet_1, sizeof(large_pmt_packet_1)));
    packetizer.on_input(ByteView(large_pmt_packet_2_discontinuity, sizeof(large_pmt_packet_2_discontinuity)));

    REQUIRE(packets_read == 2);
    REQUIRE(pmt.size() == 0); // PMT should not have been updated.

    // Send through the correct packet sequence and check we have the correct PMT.
    packetizer.on_input(ByteView(large_pmt_packet_1, sizeof(large_pmt_packet_1)));
    packetizer.on_input(ByteView(large_pmt_packet_2, sizeof(large_pmt_packet_2)));

    REQUIRE(packets_read == 4);
    REQUIRE(pmt.size() == 50);
    for (int pid = 256; pid <= 305; pid++)
    {
        REQUIRE(pmt.is_tracked_pid(pid));
    }
}


TEST_CASE("Packetizer can handle a bad packet")
{
    ProgramMapTable pmt;
    int packets_read = 0;
    Packetizer packetizer([&](const Packet & pkt)
    {
        pmt.on_packet(pkt);
        packets_read++;
    });

    packetizer.on_input(ByteView(large_pmt_packet_1, sizeof(large_pmt_packet_1)));
    packetizer.on_input(ByteView(large_pmt_packet_2_discontinuity, sizeof(large_pmt_packet_2_discontinuity)));

    REQUIRE(packets_read == 2);
    REQUIRE(pmt.size() == 0); // PMT should not have been updated.

                              // Send through the correct packet sequence and check we have the correct PMT.
    packetizer.on_input(ByteView(large_pmt_packet_1, sizeof(large_pmt_packet_1)));
    packetizer.on_input(ByteView(large_pmt_packet_2, sizeof(large_pmt_packet_2)));

    REQUIRE(packets_read == 4);
    REQUIRE(pmt.size() == 50);
    for (int pid = 256; pid <= 305; pid++)
    {
        REQUIRE(pmt.is_tracked_pid(pid));
    }
}